version: '3.8'

services:
  # Main Instagram Scraper Application
  instagram-scraper:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VERSION: ${VERSION:-latest}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
    container_name: instagram-scraper-app
    restart: unless-stopped
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONPATH=/app/src
    env_file:
      - .env.${ENVIRONMENT:-production}
    volumes:
      - scraper_data:/app/data
      - scraper_sessions:/app/sessions
      - scraper_logs:/app/logs
      - ./config:/app/config:ro
    networks:
      - scraper-network
    depends_on:
      - redis
      - postgres
    ports:
      - "${APP_PORT:-8080}:8080"
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Scheduler Service for Automated Scraping
  instagram-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: instagram-scraper-scheduler
    restart: unless-stopped
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONPATH=/app/src
    env_file:
      - .env.${ENVIRONMENT:-production}
    volumes:
      - scraper_data:/app/data
      - scraper_sessions:/app/sessions
      - scraper_logs:/app/logs
      - ./config:/app/config:ro
    networks:
      - scraper-network
    depends_on:
      - redis
      - postgres
      - instagram-scraper
    command: ["python", "config/scheduler.py", "--run"]
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for Caching and Session Management
  redis:
    image: redis:7-alpine
    container_name: instagram-scraper-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - scraper-network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # PostgreSQL Database for Data Storage
  postgres:
    image: postgres:15-alpine
    container_name: instagram-scraper-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-instagram_scraper}
      POSTGRES_USER: ${POSTGRES_USER:-scraper_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change_this_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d:ro
      - ./backups:/backups
    networks:
      - scraper-network
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-scraper_user} -d ${POSTGRES_DB:-instagram_scraper}"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: instagram-scraper-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - scraper-network
      - monitoring-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 256M

  # Grafana for Monitoring Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: instagram-scraper-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-change_this_password}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - monitoring-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: instagram-scraper-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - scraper-network
      - monitoring-network
    depends_on:
      - instagram-scraper
      - grafana
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Log Aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: instagram-scraper-loki
    restart: unless-stopped
    ports:
      - "${LOKI_PORT:-3100}:3100"
    volumes:
      - ./docker/loki/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - monitoring-network
    command: -config.file=/etc/loki/local-config.yaml
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Backup Service
  backup:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: instagram-scraper-backup
    restart: "no"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
    env_file:
      - .env.${ENVIRONMENT:-production}
    volumes:
      - scraper_data:/app/data:ro
      - postgres_data:/postgres_data:ro
      - ./backups:/backups
    networks:
      - scraper-network
    depends_on:
      - postgres
    command: ["python", "scripts/backup.py"]
    profiles:
      - backup

volumes:
  scraper_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_VOLUME_PATH:-./volumes/data}
  scraper_sessions:
    driver: local
  scraper_logs:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  scraper-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  monitoring-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# Development override
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
# For development with hot reload and debug capabilities
